
# __CLANG_OFFLOAD_BUNDLE____START__ openmp-nvptx64-nvidia-cuda
//
// Generated by LLVM NVPTX Back-End
//

.version 6.1
.target sm_60
.address_size 64

	// .weak	__omp_offloading_10302_40019_axpy_l12
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.global .align 1 .b8 _$_str1[20] = {116, 104, 105, 115, 32, 97, 32, 116, 115, 101, 116, 58, 32, 37, 102, 32, 37, 102, 10, 0};
.weak .global .align 1 .u8 __omp_offloading_10302_40019_axpy_l12_exec_mode;
.extern .shared .align 8 .b64 omptarget_nvptx_threadPrivateContext;
.extern .shared .align 8 .b8 DataSharingState[896];
.extern .shared .align 4 .u32 execution_param;
.extern .global .align 16 .b8 omptarget_nvptx_device_State[703719296];

.weak .entry __omp_offloading_10302_40019_axpy_l12(
	.param .u64 __omp_offloading_10302_40019_axpy_l12_param_0,
	.param .u64 __omp_offloading_10302_40019_axpy_l12_param_1,
	.param .u64 __omp_offloading_10302_40019_axpy_l12_param_2,
	.param .u64 __omp_offloading_10302_40019_axpy_l12_param_3,
	.param .u64 __omp_offloading_10302_40019_axpy_l12_param_4
)
{
	.local .align 8 .b8 	__local_depot0[16];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<22>;
	.reg .b16 	%rs<6>;
	.reg .f32 	%f<7>;
	.reg .b32 	%r<80>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<124>;

	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r23, 1;
	st.shared.u32 	[execution_param], %r23;
	setp.eq.s32 	%p1, %r1, 0;
	@%p1 bra 	LBB0_2;
	bar.sync 	0;
	ld.shared.u64 	%rd116, [omptarget_nvptx_threadPrivateContext];
	cvt.u64.u32 	%rd115, %r1;
	mul.wide.u32 	%rd43, %r1, 72;
	add.s64 	%rd44, %rd116, %rd43;
	add.s64 	%rd117, %rd44, 263648;
	bra.uni 	LBB0_5;
LBB0_2:
	// begin inline asm
	mov.u32 %r24, %smid;
	// end inline asm
	shr.u32 	%r25, %r24, 3;
	mul.wide.u32 	%rd45, %r25, 613566757;
	shr.u64 	%rd46, %rd45, 32;
	cvt.u32.u64 	%r26, %rd46;
	mul.lo.s32 	%r27, %r26, 56;
	sub.s32 	%r28, %r24, %r27;
	mul.wide.u32 	%rd47, %r28, 12566416;
	mov.u64 	%rd48, omptarget_nvptx_device_State;
	add.s64 	%rd7, %rd48, %rd47;
	add.s64 	%rd49, %rd7, 12566272;
	atom.global.add.u32 	%r29, [%rd49], 1;
	and.b32  	%r30, %r29, 31;
	shr.u32 	%r31, %r29, 4;
	and.b32  	%r4, %r31, 268435454;
	cvt.u64.u32 	%rd8, %r30;
	mul.wide.u32 	%rd50, %r30, 4;
	add.s64 	%rd51, %rd7, %rd50;
	add.s64 	%rd9, %rd51, 12566276;
LBB0_3:
	atom.global.add.u32 	%r32, [%rd9], 0;
	setp.ne.s32 	%p2, %r32, %r4;
	@%p2 bra 	LBB0_3;
	shl.b64 	%rd53, %rd8, 3;
	add.s64 	%rd54, %rd7, %rd53;
	add.s64 	%rd55, %rd54, 12566016;
	atom.global.add.u64 	%rd56, [%rd55], 0;
	setp.eq.s64 	%p3, %rd56, 0;
	mul.lo.s64 	%rd57, %rd8, 392688;
	add.s64 	%rd58, %rd7, %rd57;
	cvta.global.u64 	%rd59, %rd58;
	selp.b64 	%rd60, %rd59, %rd56, %p3;
	and.b32  	%r33, %r4, 33554430;
	or.b32  	%r34, %r33, 1;
	atom.global.exch.b32 	%r35, [%rd9], %r34;
	st.shared.u64 	[omptarget_nvptx_threadPrivateContext], %rd60;
	mov.u16 	%rs1, 0;
	st.u8 	[%rd60+40], %rs1;
	ld.shared.u32 	%r36, [execution_param];
	and.b32  	%r37, %r36, 1;
	setp.eq.b32 	%p4, %r37, 1;
	add.s32 	%r38, %r3, -1;
	and.b32  	%r39, %r38, 65504;
	selp.b32 	%r40, %r3, %r39, %p4;
	st.u16 	[%rd60+42], %r40;
	st.u16 	[%rd60+46], %rs1;
	mov.u16 	%rs2, 1;
	st.u16 	[%rd60+48], %rs2;
	mov.u64 	%rd61, 1;
	st.u64 	[%rd60+56], %rd61;
	mov.u64 	%rd115, 0;
	st.u64 	[%rd60+72], %rd115;
	st.volatile.u64 	[%rd60+80], %rd115;
	st.u8 	[%rd60+168], %rs1;
	ld.volatile.u64 	%rd62, [%rd60+80];
	st.u64 	[%rd60+88], %rd62;
	bar.sync 	0;
	ld.shared.u64 	%rd116, [omptarget_nvptx_threadPrivateContext];
	add.s64 	%rd117, %rd116, 263648;
LBB0_5:
	cvt.u16.u32 	%rs3, %r3;
	mov.u16 	%rs4, 48;
	st.u8 	[%rd117+40], %rs4;
	mov.u16 	%rs5, 0;
	st.u16 	[%rd117+42], %rs5;
	st.u16 	[%rd117+46], %r1;
	st.u16 	[%rd117+48], %rs3;
	mov.u64 	%rd63, 1;
	st.u64 	[%rd117+56], %rd63;
	st.u64 	[%rd117+64], %rd116;
	st.u16 	[%rd117+44], %rs3;
	shl.b64 	%rd64, %rd115, 3;
	add.s64 	%rd65, %rd116, %rd64;
	st.u64 	[%rd65+337376], %rd117;
	ld.shared.u64 	%rd66, [omptarget_nvptx_threadPrivateContext];
	add.s64 	%rd67, %rd66, %rd64;
	ld.volatile.u64 	%rd68, [%rd116+80];
	st.u64 	[%rd67+347616], %rd68;
	and.b32  	%r41, %r1, 31;
	setp.ne.s32 	%p5, %r41, 0;
	@%p5 bra 	LBB0_12;
	shr.u32 	%r5, %r1, 5;
	and.b32  	%r42, %r1, 992;
	setp.ne.s32 	%p6, %r42, 992;
	@%p6 bra 	LBB0_9;
	ld.u64 	%rd75, [%rd116+263384];
	add.s64 	%rd16, %rd116, 263648;
	setp.eq.s64 	%p8, %rd75, %rd16;
	mov.u64 	%rd118, 0;
	@%p8 bra 	LBB0_11;
	add.s64 	%rd118, %rd116, 263360;
	mov.u64 	%rd76, 0;
	st.v2.u64 	[%rd116+263360], {%rd76, %rd76};
	st.v2.u64 	[%rd116+263376], {%rd76, %rd16};
	bra.uni 	LBB0_11;
LBB0_9:
	mul.wide.u32 	%rd70, %r5, 8224;
	add.s64 	%rd71, %rd116, %rd70;
	ld.u64 	%rd72, [%rd71+216];
	add.s64 	%rd19, %rd71, 8416;
	setp.eq.s64 	%p7, %rd72, %rd19;
	mov.u64 	%rd118, 0;
	@%p7 bra 	LBB0_11;
	add.s64 	%rd118, %rd71, 192;
	add.s64 	%rd20, %rd71, 208;
	mov.u64 	%rd73, 0;
	st.v2.u64 	[%rd118], {%rd73, %rd73};
	st.v2.u64 	[%rd20], {%rd73, %rd19};
LBB0_11:
	mul.wide.u32 	%rd77, %r5, 8;
	mov.u64 	%rd78, DataSharingState;
	add.s64 	%rd79, %rd78, %rd77;
	st.shared.u64 	[%rd79], %rd118;
	add.s64 	%rd80, %rd118, 32;
	st.shared.u64 	[%rd79+256], %rd80;
LBB0_12:
	ld.param.u32 	%r2, [__omp_offloading_10302_40019_axpy_l12_param_1];
	setp.ne.s32 	%p9, %r1, 0;
	@%p9 bra 	LBB0_15;
	mov.u64 	%rd83, DataSharingState;
	add.s64 	%rd119, %rd83, 256;
	mov.u64 	%rd82, 0;
	ld.shared.u64 	%rd23, [omptarget_nvptx_threadPrivateContext];
	mov.u64 	%rd120, %rd82;
LBB0_14:
	add.s64 	%rd84, %rd23, %rd120;
	add.s64 	%rd85, %rd84, 224;
	add.s64 	%rd86, %rd84, 8416;
	add.s64 	%rd87, %rd84, 192;
	st.v2.u64 	[%rd84+192], {%rd82, %rd82};
	st.v2.u64 	[%rd84+208], {%rd82, %rd86};
	st.shared.u64 	[%rd119+-256], %rd87;
	st.shared.u64 	[%rd119], %rd85;
	add.s64 	%rd89, %rd84, 16640;
	st.v2.u64 	[%rd84+8416], {%rd82, %rd82};
	st.v2.u64 	[%rd84+8432], {%rd82, %rd89};
	st.shared.u64 	[%rd119+-248], %rd86;
	add.s64 	%rd90, %rd84, 8448;
	st.shared.u64 	[%rd119+8], %rd90;
	add.s64 	%rd91, %rd84, 24864;
	st.v2.u64 	[%rd84+16640], {%rd82, %rd82};
	st.v2.u64 	[%rd84+16656], {%rd82, %rd91};
	st.shared.u64 	[%rd119+-240], %rd89;
	add.s64 	%rd92, %rd84, 16672;
	st.shared.u64 	[%rd119+16], %rd92;
	add.s64 	%rd93, %rd84, 33088;
	st.v2.u64 	[%rd84+24864], {%rd82, %rd82};
	st.v2.u64 	[%rd84+24880], {%rd82, %rd93};
	st.shared.u64 	[%rd119+-232], %rd91;
	add.s64 	%rd94, %rd84, 24896;
	st.shared.u64 	[%rd119+24], %rd94;
	add.s64 	%rd120, %rd120, 32896;
	cvt.u32.u64 	%r43, %rd120;
	add.s64 	%rd119, %rd119, 32;
	setp.ne.s32 	%p10, %r43, 263168;
	@%p10 bra 	LBB0_14;
LBB0_15:
	membar.cta;
	setp.lt.s32 	%p11, %r2, 1;
	@%p11 bra 	LBB0_25;
	ld.shared.u32 	%r44, [execution_param];
	and.b32  	%r7, %r44, 1;
	and.b32  	%r8, %r44, 2;
	setp.eq.b32 	%p12, %r7, 1;
	@%p12 bra 	LBB0_18;
	add.s32 	%r45, %r3, -1;
	and.b32  	%r46, %r45, -32;
	setp.ge.s32 	%p13, %r1, %r46;
	mov.u64 	%rd121, 0;
	@%p13 bra 	LBB0_19;
LBB0_18:
	cvt.u64.u32 	%rd121, %r1;
LBB0_19:
	add.s32 	%r6, %r2, -1;
	setp.eq.s32 	%p14, %r8, 0;
	@%p14 bra 	LBB0_21;
	bra.uni 	LBB0_20;
LBB0_21:
	ld.shared.u64 	%rd96, [omptarget_nvptx_threadPrivateContext];
	shl.b64 	%rd97, %rd121, 3;
	add.s64 	%rd98, %rd96, %rd97;
	ld.u64 	%rd99, [%rd98+337376];
	ld.u16 	%r77, [%rd99+46];
	ld.u16 	%r78, [%rd99+48];
	bra.uni 	LBB0_22;
LBB0_20:
	setp.ne.s32 	%p15, %r7, 0;
	add.s32 	%r47, %r3, -1;
	and.b32  	%r48, %r47, -32;
	setp.lt.s32 	%p16, %r1, %r48;
	selp.b32 	%r49, %r1, 0, %p16;
	selp.b32 	%r77, %r1, %r49, %p15;
	add.s32 	%r50, %r3, -32;
	selp.b32 	%r78, %r3, %r50, %p15;
LBB0_22:
	div.s32 	%r51, %r2, %r78;
	mul.lo.s32 	%r15, %r51, %r78;
	sub.s32 	%r52, %r2, %r15;
	setp.gt.s32 	%p17, %r52, %r77;
	add.s32 	%r53, %r51, 1;
	mul.lo.s32 	%r54, %r53, %r77;
	mul.lo.s32 	%r16, %r51, %r77;
	add.s32 	%r55, %r52, %r16;
	selp.b32 	%r56, %r53, %r51, %p17;
	selp.b32 	%r17, %r54, %r55, %p17;
	add.s32 	%r57, %r56, %r17;
	add.s32 	%r58, %r57, -1;
	min.s32 	%r18, %r58, %r6;
	setp.gt.s32 	%p18, %r17, %r18;
	@%p18 bra 	LBB0_25;
	ld.param.u64 	%rd40, [__omp_offloading_10302_40019_axpy_l12_param_4];
	ld.param.u64 	%rd41, [__omp_offloading_10302_40019_axpy_l12_param_2];
	add.u64 	%rd42, %SP, 0;
	cvta.to.global.u64 	%rd1, %rd40;
	cvta.to.global.u64 	%rd2, %rd41;
	add.u64 	%rd3, %SPL, 0;
	ld.param.f32 	%f1, [__omp_offloading_10302_40019_axpy_l12_param_3];
	add.s32 	%r59, %r16, -2;
	add.s32 	%r60, %r15, -1;
	sub.s32 	%r61, %r60, %r2;
	not.b32 	%r62, %r77;
	max.s32 	%r63, %r61, %r62;
	sub.s32 	%r79, %r59, %r63;
	mul.wide.s32 	%rd100, %r17, 4;
	add.s64 	%rd123, %rd1, %rd100;
	add.s64 	%rd122, %rd2, %rd100;
	mov.u64 	%rd101, _$_str1;
	cvta.global.u64 	%rd102, %rd101;
LBB0_24:
	ld.global.f32 	%f2, [%rd123];
	mul.rn.f32 	%f3, %f2, %f1;
	ld.global.f32 	%f4, [%rd122];
	add.rn.f32 	%f5, %f3, %f4;
	st.global.f32 	[%rd122], %f5;
	ld.global.f32 	%f6, [%rd123];
	cvt.f64.f32 	%fd1, %f6;
	cvt.f64.f32 	%fd2, %f5;
	st.local.f64 	[%rd3], %fd1;
	st.local.f64 	[%rd3+8], %fd2;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd102;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd42;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r64, [retval0+0];
	} // callseq 0
	add.s32 	%r79, %r79, 1;
	add.s64 	%rd123, %rd123, 4;
	add.s64 	%rd122, %rd122, 4;
	setp.lt.s32 	%p19, %r79, %r18;
	@%p19 bra 	LBB0_24;
LBB0_25:
	bar.sync 	0;
	@%p9 bra 	LBB0_29;
	// begin inline asm
	mov.u32 %r65, %smid;
	// end inline asm
	shr.u32 	%r66, %r65, 3;
	mul.wide.u32 	%rd104, %r66, 613566757;
	shr.u64 	%rd105, %rd104, 32;
	cvt.u32.u64 	%r67, %rd105;
	mul.lo.s32 	%r68, %r67, 56;
	sub.s32 	%r69, %r65, %r68;
	mul.wide.u32 	%rd106, %r69, 12566416;
	mov.u64 	%rd107, omptarget_nvptx_device_State;
	add.s64 	%rd36, %rd107, %rd106;
	ld.shared.u64 	%rd37, [omptarget_nvptx_threadPrivateContext];
	add.s64 	%rd108, %rd36, 12566404;
	atom.global.add.u32 	%r70, [%rd108], 1;
	and.b32  	%r71, %r70, 31;
	shr.u32 	%r72, %r70, 4;
	or.b32  	%r22, %r72, 1;
	cvt.u64.u32 	%rd38, %r71;
	mul.wide.u32 	%rd109, %r71, 4;
	add.s64 	%rd110, %rd36, %rd109;
	add.s64 	%rd39, %rd110, 12566276;
LBB0_27:
	atom.global.add.u32 	%r73, [%rd39], 0;
	setp.ne.s32 	%p21, %r73, %r22;
	@%p21 bra 	LBB0_27;
	shl.b64 	%rd111, %rd38, 3;
	add.s64 	%rd112, %rd36, %rd111;
	add.s64 	%rd113, %rd112, 12566016;
	atom.global.exch.b64 	%rd114, [%rd113], %rd37;
	add.s32 	%r74, %r22, 1;
	and.b32  	%r75, %r74, 33554430;
	atom.global.exch.b32 	%r76, [%rd39], %r75;
LBB0_29:
	ret;

}


# __CLANG_OFFLOAD_BUNDLE____END__ openmp-nvptx64-nvidia-cuda

# __CLANG_OFFLOAD_BUNDLE____START__ host-x86_64-unknown-linux-gnu
	.text
	.file	"omp-axpy.c"
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4               # -- Begin function axpy
.LCPI0_0:
	.quad	4                       # 0x4
	.quad	4                       # 0x4
	.text
	.globl	axpy
	.p2align	4, 0x90
	.type	axpy,@function
axpy:                                   # @axpy
	.cfi_startproc
# %bb.0:
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	subq	$168, %rsp
	.cfi_def_cfa_offset 208
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdx, %r14
	movq	%rsi, %r15
	movl	%edi, %ebx
	movd	%xmm0, %r12d
	leaq	(,%rbx,4), %rax
	movq	$0, 88(%rsp)
	movq	$0, 48(%rsp)
	movq	%rbx, 96(%rsp)
	movq	%rbx, 56(%rsp)
	movaps	.LCPI0_0(%rip), %xmm0   # xmm0 = [4,4]
	movaps	%xmm0, 128(%rsp)
	movq	%rsi, 104(%rsp)
	movq	%rsi, 64(%rsp)
	movq	%rax, 144(%rsp)
	movq	%r12, 112(%rsp)
	movq	%r12, 72(%rsp)
	movq	$4, 152(%rsp)
	movq	%rdx, 120(%rsp)
	movq	%rdx, 80(%rsp)
	movq	%rax, 160(%rsp)
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	leaq	96(%rsp), %rcx
	leaq	56(%rsp), %r8
	leaq	136(%rsp), %r9
	movq	$-1, %rdi
	movl	$.__omp_offloading_10302_40019_axpy_l12.region_id, %esi
	movl	$5, %edx
	pushq	$.L.offload_maptypes
	.cfi_adjust_cfa_offset 8
	callq	__tgt_target
	addq	$16, %rsp
	.cfi_adjust_cfa_offset -16
	testl	%eax, %eax
	je	.LBB0_2
# %bb.1:
	movq	$0, 40(%rsp)
	movq	%rbx, 32(%rsp)
	movq	%r15, 24(%rsp)
	movq	%r12, 16(%rsp)
	movq	%r14, 8(%rsp)
	leaq	8(%rsp), %rbx
	leaq	16(%rsp), %r10
	leaq	40(%rsp), %rcx
	leaq	32(%rsp), %r8
	leaq	24(%rsp), %r9
	movl	$.L__unnamed_1, %edi
	movl	$5, %esi
	movl	$.omp_outlined., %edx
	movl	$0, %eax
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	callq	__kmpc_fork_call
	addq	$16, %rsp
	.cfi_adjust_cfa_offset -16
.LBB0_2:
	addq	$168, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end0:
	.size	axpy, .Lfunc_end0-axpy
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function .omp_outlined.
	.type	.omp_outlined.,@function
.omp_outlined.:                         # @.omp_outlined.
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movl	(%rcx), %ebp
	testl	%ebp, %ebp
	jle	.LBB1_5
# %bb.1:
	movq	%r9, %r14
	movq	%r8, %r12
	addl	$-1, %ebp
	movl	$0, 4(%rsp)
	movl	%ebp, (%rsp)
	movl	$1, 12(%rsp)
	movl	$0, 8(%rsp)
	movl	(%rdi), %r15d
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	leaq	20(%rsp), %rax
	leaq	16(%rsp), %rcx
	leaq	12(%rsp), %r8
	leaq	8(%rsp), %r9
	movl	$.L__unnamed_2, %edi
	movl	$34, %edx
	movl	%r15d, %esi
	pushq	$1
	.cfi_adjust_cfa_offset 8
	pushq	$1
	.cfi_adjust_cfa_offset 8
	pushq	%rax
	.cfi_adjust_cfa_offset 8
	callq	__kmpc_for_static_init_4
	addq	$32, %rsp
	.cfi_adjust_cfa_offset -32
	movl	(%rsp), %eax
	cmpl	%ebp, %eax
	cmovlel	%eax, %ebp
	movl	%ebp, (%rsp)
	movslq	4(%rsp), %rbx
	cmpl	%ebp, %ebx
	jg	.LBB1_4
# %bb.2:
	movq	64(%rsp), %rbp
	addq	$-1, %rbx
	.p2align	4, 0x90
.LBB1_3:                                # =>This Inner Loop Header: Depth=1
	movss	(%r14), %xmm1           # xmm1 = mem[0],zero,zero,zero
	movq	(%rbp), %rax
	mulss	4(%rax,%rbx,4), %xmm1
	movq	(%r12), %rcx
	addss	4(%rcx,%rbx,4), %xmm1
	movss	%xmm1, 4(%rcx,%rbx,4)
	movss	4(%rax,%rbx,4), %xmm0   # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	cvtss2sd	%xmm1, %xmm1
	movl	$.L.str.1, %edi
	movb	$2, %al
	callq	printf
	movslq	(%rsp), %rax
	addq	$1, %rbx
	cmpq	%rax, %rbx
	jl	.LBB1_3
.LBB1_4:                                # %.loopexit
	movl	$.L__unnamed_2, %edi
	movl	%r15d, %esi
	callq	__kmpc_for_static_fini
.LBB1_5:
	addq	$16, %rsp
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end1:
	.size	.omp_outlined., .Lfunc_end1-.omp_outlined.
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function main
.LCPI2_0:
	.quad	4607182418800017408     # double 1
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI2_1:
	.quad	4                       # 0x4
	.quad	4                       # 0x4
.LCPI2_2:
	.quad	400                     # 0x190
	.quad	4                       # 0x4
	.text
	.globl	main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:
	pushq	%r14
	.cfi_def_cfa_offset 16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	subq	$1000, %rsp             # imm = 0x3E8
	.cfi_def_cfa_offset 1024
	.cfi_offset %rbx, -24
	.cfi_offset %r14, -16
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB2_1:                                # =>This Inner Loop Header: Depth=1
	movl	$1065353216, 592(%rsp,%rbx,4) # imm = 0x3F800000
	movl	$1065353216, 192(%rsp,%rbx,4) # imm = 0x3F800000
	movl	$.L.str.2, %edi
	movb	$1, %al
	movsd	.LCPI2_0(%rip), %xmm0   # xmm0 = mem[0],zero
	callq	printf
	addq	$1, %rbx
	cmpq	$100, %rbx
	jne	.LBB2_1
# %bb.2:
	movl	$100, %eax
	movq	%rax, %xmm0
	pslldq	$8, %xmm0               # xmm0 = zero,zero,zero,zero,zero,zero,zero,zero,xmm0[0,1,2,3,4,5,6,7]
	movdqa	%xmm0, 96(%rsp)
	movdqa	%xmm0, 48(%rsp)
	movaps	.LCPI2_1(%rip), %xmm0   # xmm0 = [4,4]
	movaps	%xmm0, 144(%rsp)
	leaq	592(%rsp), %r14
	movq	%r14, 112(%rsp)
	movq	%r14, 64(%rsp)
	movq	$1056964608, 120(%rsp)  # imm = 0x3F000000
	movq	$1056964608, 72(%rsp)   # imm = 0x3F000000
	movaps	.LCPI2_2(%rip), %xmm0   # xmm0 = [400,4]
	movaps	%xmm0, 160(%rsp)
	leaq	192(%rsp), %rbx
	movq	%rbx, 128(%rsp)
	movq	%rbx, 80(%rsp)
	movq	$400, 176(%rsp)         # imm = 0x190
	subq	$8, %rsp
	.cfi_adjust_cfa_offset 8
	leaq	104(%rsp), %rcx
	leaq	56(%rsp), %r8
	leaq	152(%rsp), %r9
	movq	$-1, %rdi
	movl	$.__omp_offloading_10302_40019_axpy_l12.region_id, %esi
	movl	$5, %edx
	pushq	$.L.offload_maptypes
	.cfi_adjust_cfa_offset 8
	callq	__tgt_target
	addq	$16, %rsp
	.cfi_adjust_cfa_offset -16
	testl	%eax, %eax
	je	.LBB2_4
# %bb.3:
	movq	$0, 40(%rsp)
	movq	$100, 32(%rsp)
	movq	%r14, 24(%rsp)
	movq	$1056964608, 16(%rsp)   # imm = 0x3F000000
	movq	%rbx, 8(%rsp)
	leaq	8(%rsp), %rbx
	leaq	16(%rsp), %r10
	leaq	40(%rsp), %rcx
	leaq	32(%rsp), %r8
	leaq	24(%rsp), %r9
	movl	$.L__unnamed_1, %edi
	movl	$5, %esi
	movl	$.omp_outlined., %edx
	movl	$0, %eax
	pushq	%rbx
	.cfi_adjust_cfa_offset 8
	pushq	%r10
	.cfi_adjust_cfa_offset 8
	callq	__kmpc_fork_call
	addq	$16, %rsp
	.cfi_adjust_cfa_offset -16
.LBB2_4:
	xorl	%eax, %eax
	addq	$1000, %rsp             # imm = 0x3E8
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end2:
	.size	main, .Lfunc_end2-main
	.cfi_endproc
                                        # -- End function
	.section	.text.startup,"axG",@progbits,.omp_offloading.descriptor_reg,comdat
	.p2align	4, 0x90         # -- Begin function .omp_offloading.descriptor_unreg
	.type	.omp_offloading.descriptor_unreg,@function
.omp_offloading.descriptor_unreg:       # @.omp_offloading.descriptor_unreg
	.cfi_startproc
# %bb.0:
	movl	$.omp_offloading.descriptor, %edi
	jmp	__tgt_unregister_lib    # TAILCALL
.Lfunc_end3:
	.size	.omp_offloading.descriptor_unreg, .Lfunc_end3-.omp_offloading.descriptor_unreg
	.cfi_endproc
                                        # -- End function
	.hidden	.omp_offloading.descriptor_reg # -- Begin function .omp_offloading.descriptor_reg
	.weak	.omp_offloading.descriptor_reg
	.p2align	4, 0x90
	.type	.omp_offloading.descriptor_reg,@function
.omp_offloading.descriptor_reg:         # @.omp_offloading.descriptor_reg
	.cfi_startproc
# %bb.0:
	pushq	%rax
	.cfi_def_cfa_offset 16
	movl	$.omp_offloading.descriptor, %edi
	callq	__tgt_register_lib
	movl	$.omp_offloading.descriptor_unreg, %edi
	movl	$.omp_offloading.descriptor, %esi
	movl	$__dso_handle, %edx
	popq	%rax
	.cfi_def_cfa_offset 8
	jmp	__cxa_atexit            # TAILCALL
.Lfunc_end4:
	.size	.omp_offloading.descriptor_reg, .Lfunc_end4-.omp_offloading.descriptor_reg
	.cfi_endproc
                                        # -- End function
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	";unknown;unknown;0;0;;"
	.size	.L.str, 23

	.type	.L__unnamed_2,@object   # @0
	.section	.rodata,"a",@progbits
	.p2align	3
.L__unnamed_2:
	.long	0                       # 0x0
	.long	514                     # 0x202
	.long	0                       # 0x0
	.long	0                       # 0x0
	.quad	.L.str
	.size	.L__unnamed_2, 24

	.type	.L.str.1,@object        # @.str.1
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1:
	.asciz	"this a tset: %f %f\n"
	.size	.L.str.1, 20

	.type	.L__unnamed_1,@object   # @1
	.section	.rodata,"a",@progbits
	.p2align	3
.L__unnamed_1:
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.quad	.L.str
	.size	.L__unnamed_1, 24

	.type	.__omp_offloading_10302_40019_axpy_l12.region_id,@object # @.__omp_offloading_10302_40019_axpy_l12.region_id
	.weak	.__omp_offloading_10302_40019_axpy_l12.region_id
.__omp_offloading_10302_40019_axpy_l12.region_id:
	.byte	0                       # 0x0
	.size	.__omp_offloading_10302_40019_axpy_l12.region_id, 1

	.type	.L.offload_maptypes,@object # @.offload_maptypes
	.p2align	4
.L.offload_maptypes:
	.quad	800                     # 0x320
	.quad	800                     # 0x320
	.quad	35                      # 0x23
	.quad	800                     # 0x320
	.quad	33                      # 0x21
	.size	.L.offload_maptypes, 40

	.type	.L.str.2,@object        # @.str.2
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.2:
	.asciz	"this is Y: %f\n"
	.size	.L.str.2, 15

	.type	.omp_offloading.entry_name,@object # @.omp_offloading.entry_name
	.section	.rodata.str1.16,"aMS",@progbits,1
	.p2align	4
.omp_offloading.entry_name:
	.asciz	"__omp_offloading_10302_40019_axpy_l12"
	.size	.omp_offloading.entry_name, 38

	.type	.omp_offloading.entry.__omp_offloading_10302_40019_axpy_l12,@object # @.omp_offloading.entry.__omp_offloading_10302_40019_axpy_l12
	.section	.omp_offloading.entries,"a",@progbits
	.weak	.omp_offloading.entry.__omp_offloading_10302_40019_axpy_l12
.omp_offloading.entry.__omp_offloading_10302_40019_axpy_l12:
	.quad	.__omp_offloading_10302_40019_axpy_l12.region_id
	.quad	.omp_offloading.entry_name
	.quad	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	.omp_offloading.entry.__omp_offloading_10302_40019_axpy_l12, 32

	.type	.omp_offloading.device_images,@object # @.omp_offloading.device_images
	.section	.rodata..omp_offloading.device_images,"aG",@progbits,.omp_offloading.descriptor_reg,comdat
	.p2align	3
.omp_offloading.device_images:
	.quad	".omp_offloading.img_start.nvptx64-nvidia-cuda"
	.quad	".omp_offloading.img_end.nvptx64-nvidia-cuda"
	.quad	.omp_offloading.entries_begin
	.quad	.omp_offloading.entries_end
	.size	.omp_offloading.device_images, 32

	.type	.omp_offloading.descriptor,@object # @.omp_offloading.descriptor
	.section	.rodata..omp_offloading.descriptor,"aG",@progbits,.omp_offloading.descriptor_reg,comdat
	.p2align	3
.omp_offloading.descriptor:
	.long	1                       # 0x1
	.zero	4
	.quad	.omp_offloading.device_images
	.quad	.omp_offloading.entries_begin
	.quad	.omp_offloading.entries_end
	.size	.omp_offloading.descriptor, 32

	.hidden	__dso_handle
	.section	.init_array.0,"aGw",@init_array,.omp_offloading.descriptor_reg,comdat
	.p2align	3
	.quad	.omp_offloading.descriptor_reg
	.weak	".omp_offloading.img_start.nvptx64-nvidia-cuda"
	.weak	".omp_offloading.img_end.nvptx64-nvidia-cuda"

	.ident	"clang version 7.0.0 (tags/RELEASE_700/final)"
	.section	".note.GNU-stack","",@progbits
	.addrsig
	.addrsig_sym .omp_outlined.
	.addrsig_sym .omp_offloading.descriptor_unreg
	.addrsig_sym .omp_offloading.descriptor_reg
	.addrsig_sym .__omp_offloading_10302_40019_axpy_l12.region_id
	.addrsig_sym .omp_offloading.entries_begin
	.addrsig_sym .omp_offloading.entries_end
	.addrsig_sym ".omp_offloading.img_start.nvptx64-nvidia-cuda"
	.addrsig_sym ".omp_offloading.img_end.nvptx64-nvidia-cuda"
	.addrsig_sym .omp_offloading.descriptor
	.addrsig_sym __dso_handle

# __CLANG_OFFLOAD_BUNDLE____END__ host-x86_64-unknown-linux-gnu
